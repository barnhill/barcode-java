package com.pnuema.java.barcode.symbologies;

import com.pnuema.java.barcode.BarcodeCommon;
import com.pnuema.java.barcode.BarcodeException;

/**
 * The FIM class represents the Facing Identification Mark (FIM)
 * barcode system used in postal services for mail sorting and processing.
 * It encodes specific FIM types (A, B, C, D, E) which correspond to
 * different postal services and functions.
 * The class provides functionality for initializing and encoding
 * FIM barcodes based on the type input. FIM types are represented
 * by a single character ('A', 'B', 'C', 'D', 'E') defining the
 * corresponding barcode format.
 */
public class FIM extends BarcodeCommon {
    /**
     * The FIMTypes enum defines the various types of Facing Identification Marks (FIM)
     * used in postal services. FIM is a specialized barcode system designed to help
     * with the automated sorting and processing of mailpieces. Each FIM type corresponds
     * to specific requirements and applications for mail handling, ensuring efficient identification
     * and routing within postal systems.
     */
    public enum FIMTypes {
        /**
         * Represents the 'FIM_A' type in the FIM (Facing Identification Mark) system.
         * FIM (Facing Identification Mark) is a barcode system used in postal services
         * to assist in the sorting and processing of mail.
         * The 'FIM_A' type specifically corresponds to mailpieces that have a
         * pre-printed Intelligent Mail barcode (IMb) and meet requirements for
         * automation compatibility, ensuring efficient handling within USPS operations.
         */
        FIM_A,
        /**
         * Represents the 'FIM_B' type in the Facing Identification Mark (FIM) system.
         * FIM is a barcode system used in postal services for the sorting and processing of mail.
         * The 'FIM_B' type is primarily associated with Business Reply Mail (BRM)
         * and Courtesy Reply Mail (CRM), which indicate pre-paid or customer-paid return envelopes.
         * This ensures that the mailpiece is properly identified and routed for efficient handling.
         */
        FIM_B,
        /**
         * Represents the 'FIM_C' type in the Facing Identification Mark (FIM) system.
         * FIM is a barcode system used in postal services for sorting and processing mail.
         * The 'FIM_C' type is typically used for mailpieces with a pre-printed Intelligent Mail barcode (IMb)
         * and associated with customer-applied markings. FIM_C ensures that such mail can be identified
         * and handled efficiently, often in connection with response envelope services such as
         * Courtesy Reply Mail (CRM) or metered reply mail, distinguishing it from other FIM types.
         */
        FIM_C,
        /**
         * Represents the 'FIM_D' type in the Facing Identification Mark (FIM) system.
         * FIM is a barcode system used in postal services to facilitate mail sorting and processing.
         * The 'FIM_D' type is used for Qualified Business Reply Mail (QBRM), which allows businesses
         * to receive prepaid return mailpieces, ensuring efficient handling and identification during processing.
         */
        FIM_D,
        /**
         * Represents the 'FIM_E' type in the Facing Identification Mark (FIM) system.
         * FIM is a barcode system used in postal services to assist in the sorting
         * and processing of mail. The 'FIM_E' type is specifically used for mail
         * that includes Information-Based Indicia (IBI), which are digital postage
         * marks generated by online postage systems. This type ensures that such
         * mailpieces are correctly recognized and handled by automated systems.
         */
        FIM_E
    }

    /**
     * Constructor for the FIM (Facing Identification Mark) class.
     * This class initializes a FIM object based on the input character (A, B, C, D, or E)
     * and determines the appropriate encoding type using pre-defined FIM codes.
     *
     * @param input the FIM type represented as a single character string (A, B, C, D, or E, case-insensitive).
     *              The input is trimmed and validated. If the input does not match one of the valid types,
     *              an error is raised indicating an invalid encoding type.
     *              Valid inputs:
     *              - "A" or "a": Encodes the input as FIM_A.
     *              - "B" or "b": Encodes the input as FIM_B.
     *              - "C" or "c": Encodes the input as FIM_C.
     *              - "D" or "d": Encodes the input as FIM_D.
     *              - "E" or "e": Encodes the input as FIM_E.
     * @throws BarcodeException if an invalid FIM type is provided (anything other than A, B, C, D, or E).
     */
    public FIM(String input) {
        input = input.trim();

        String[] FIM_Codes = {"110010011", "101101101", "110101011", "111010111", "101000101"};
        switch (input) {
            case "A":
            case "a":
                setRawData(FIM_Codes[FIMTypes.FIM_A.ordinal()]);
                break;
            case "B":
            case "b":
                setRawData(FIM_Codes[FIMTypes.FIM_B.ordinal()]);
                break;
            case "C":
            case "c":
                setRawData(FIM_Codes[FIMTypes.FIM_C.ordinal()]);
                break;
            case "D":
            case "d":
                setRawData(FIM_Codes[FIMTypes.FIM_D.ordinal()]);
                break;
            case "E":
            case "e":
                setRawData(FIM_Codes[FIMTypes.FIM_E.ordinal()]);
                break;
            default:
                error("EFIM-1: Could not determine encoding type. (Only pass in A, B, C, D, or E)");
                break;
        }
    }

    private String encodeFIM() {
        StringBuilder encoded = new StringBuilder();
        for (char c : getRawData().toCharArray()) {
            encoded.append(c).append("0");
        }

        encoded = new StringBuilder(encoded.substring(0, encoded.length() - 1));

        return encoded.toString();
    }

    public String getEncodedValue() {
        return encodeFIM();
    }
}